{"version":3,"sources":["constants/category-colors.js","context/joke-context.js","constants/cards-positions.js","components/JokeCard.js","components/JokeActions.js","components/JokesCategories.js","constants/theme.js","App.js","serviceWorker.js","index.js"],"names":["animal","background","text","primary","career","celebrity","dev","explicit","fashion","JokeContext","React","createContext","JokeProvider","children","useState","categories","setCategories","joke","setJoke","fetchingJoke","setFethingJoke","useEffect","a","async","axios","get","response","data","slice","updateJoke","category","query","currState","value","Provider","setCategory","colors","categoryColors","resetJoke","useJoke","useContext","Wrapper","styled","Grid","attrs","container","justify","alignItems","props","cardPositions","Card","Paper","CardHeader","CardBody","Title","Typography","JokeCard","positionIndex","showingJoke","Boolean","isSelected","wrapperClasses","push","headerClasses","className","join","transition-index","onClick","elevation","bg-color","font-color","direction","spacing","CSSTransition","in","timeout","unmountOnExit","item","Button","JokeCardContainer","xs","JokesCategories","variant","map","i","key","JokeActions","createMuiTheme","App","StylesProvider","injectFirst","ThemeProvider","theme","CssBaseline","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.718ee8ad.chunk.js","sourcesContent":["export default {\n  animal: {\n    background: '#ffcdd2',\n    text: '#fff',\n    primary: '#d32f2f'\n  },\n  career: {\n    background: '#c5cae9',\n    text: '#fff',\n    primary: '#303f9f'\n  },\n  celebrity: {\n    background: '#c8e6c9',\n    text: '#fff',\n    primary: '#388e3c'\n  },\n  dev: {\n    background: '#ffe0b2',\n    text: '#fff',\n    primary: '#ef6c00'\n  },\n  explicit: {\n    background: '#d1c4e9',\n    text: '#fff',\n    primary: '#512da8'\n  },\n  fashion: {\n    background: '#cfd8dc',\n    text: '#fff',\n    primary: '#455a64'\n  }\n}\n","import React from 'react'\nimport axios from 'axios'\n\nimport categoryColors from '../constants/category-colors'\n\nconst JokeContext = React.createContext()\n\nexport const JokeProvider = ({ children }) => {\n  const [categories, setCategories] = React.useState([])\n\n  const [joke, setJoke] = React.useState(null)\n\n  const [fetchingJoke, setFethingJoke] = React.useState(false)\n\n  React.useEffect(() => {\n    ;(async () => {\n      const response = await axios.get(\n        'https://api.chucknorris.io/jokes/categories'\n      )\n      setCategories(response.data.slice(0, 6))\n    })()\n  }, [])\n\n  const setCategory = category => {\n    setJoke(currState => ({\n      ...currState,\n      category,\n      colors: categoryColors[category]\n    }))\n    updateJoke(category)\n  }\n\n  const updateJoke = async category => {\n    setFethingJoke(true)\n\n    const query = (joke && joke.category) || category\n\n    const response = await axios.get(\n      `https://api.chucknorris.io/jokes/random?category=${query}`\n    )\n\n    setFethingJoke(() => {\n      setJoke(currState => ({\n        ...currState,\n        text: response.data.value\n      }))\n      return false\n    })\n  }\n\n  const resetJoke = category => {\n    setJoke(null)\n  }\n\n  return (\n    <JokeContext.Provider\n      value={{\n        joke,\n        categories,\n        fetchingJoke,\n        setCategory,\n        resetJoke,\n        updateJoke\n      }}\n    >\n      {children}\n    </JokeContext.Provider>\n  )\n}\n\nexport const useJoke = () => React.useContext(JokeContext)\n","export default [\n  'translate(50%, 100%)',\n  'translate(-50%, 100%)',\n  'translate(50%, 0%)',\n  'translate(-50%, 0%)',\n  'translate(50%, -100%)',\n  'translate(-50%, -100%)'\n]\n","import React from 'react'\nimport styled from 'styled-components'\n// Material-UI\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n// Others\nimport { useJoke } from '../context/joke-context'\nimport cardPositions from '../constants/cards-positions'\nimport categoryColors from '../constants/category-colors'\n\nconst Wrapper = styled(Grid).attrs({\n  container: true,\n  justify: 'center',\n  alignItems: 'center'\n})`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition: all 300ms ease-out;\n\n  &.center {\n    transform: ${props => cardPositions[props['transition-index']]};\n  }\n\n  &.selected {\n    z-index: 2;\n  }\n`\n\nconst Card = styled(Paper)`\n  width: 6rem;\n  height: 6rem;\n  display: flex;\n  position: absolute;\n  transition: all 300ms ease-out;\n\n  .selected & {\n    width: 15rem;\n    height: 15rem;\n  }\n`\n\nconst CardHeader = styled(Grid).attrs({\n  container: true,\n  justify: 'center',\n  alignItems: 'center'\n})`\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  background-color: ${props => props['bg-color']};\n  transition: height 300ms ease-out;\n  border-radius: 4px;\n\n  &.collapsed {\n    height: 2rem;\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n`\n\nconst CardBody = styled(Grid).attrs({\n  container: true,\n  justify: 'center',\n  alignItems: 'center'\n})`\n  margin-top: 2rem;\n  padding: 1rem;\n  text-align: center;\n`\n\nconst Title = styled(Typography)`\n  color: ${props => props['font-color']};\n  font-weight: 700;\n  text-transform: capitalize;\n`\n\nconst JokeCard = ({ category, positionIndex }) => {\n  const { joke, fetchingJoke, setCategory } = useJoke()\n\n  const showingJoke = Boolean(joke)\n  const isSelected = Boolean(joke && joke.category === category)\n\n  const wrapperClasses = []\n  if (showingJoke) wrapperClasses.push('center')\n  if (isSelected) wrapperClasses.push('selected')\n\n  const headerClasses = []\n  if (isSelected && !fetchingJoke) headerClasses.push('collapsed')\n\n  return (\n    <Wrapper\n      className={wrapperClasses.join(' ')}\n      transition-index={positionIndex}\n    >\n      <Card\n        onClick={() => setCategory(category)}\n        elevation={isSelected ? 6 : 2}\n      >\n        <CardHeader\n          className={headerClasses.join(' ')}\n          bg-color={categoryColors[category].primary}\n        >\n          <Title font-color={categoryColors[category].text}>{category}</Title>\n        </CardHeader>\n        {isSelected ? (\n          <CardBody>\n            <Typography>{joke.text}</Typography>\n          </CardBody>\n        ) : null}\n      </Card>\n    </Wrapper>\n  )\n}\n\nexport default JokeCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport CSSTransition from 'react-transition-group/CSSTransition'\n// Material-UI\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\n// Others\nimport { useJoke } from '../context/joke-context'\n\nconst Wrapper = styled(Grid).attrs({\n  container: true,\n  direction: 'column',\n  spacing: 2,\n  alignItems: 'center'\n})`\n  position: fixed;\n  width: 100%;\n  right: 0;\n  bottom: 1rem;\n  transition: opacity 300ms ease-out;\n  opacity: 0;\n\n  &.enter-done {\n    opacity: 1;\n  }\n`\n\nconst JokeCard = () => {\n  const { joke, updateJoke, resetJoke } = useJoke()\n\n  const showingJoke = Boolean(joke)\n\n  return (\n    <CSSTransition in={showingJoke} timeout={300} unmountOnExit>\n      <Wrapper>\n        <Grid item onClick={updateJoke}>\n          <Button>Carregar outra</Button>\n        </Grid>\n        <Grid item onClick={resetJoke}>\n          <Button>Retornar</Button>\n        </Grid>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default JokeCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport JokeCard from './JokeCard'\nimport JokeActions from './JokeActions'\n\nimport { useJoke } from '../context/joke-context'\n\nconst Wrapper = styled(Grid)`\n  padding: 1rem;\n  background-color: ${props => props['bg-color']};\n  transition: background-color 300ms ease-out;\n`\n\nconst Title = styled(Typography)`\n  text-align: center;\n  color: rgba(0, 0, 0, 0.3);\n`\n\nconst JokeCardContainer = styled(Grid).attrs({\n  item: true,\n  xs: 6\n})`\n  position: relative;\n`\n\nconst JokesCategories = () => {\n  const { joke, categories } = useJoke()\n  return (\n    <Wrapper\n      container\n      direction=\"column\"\n      bg-color={joke && joke.colors.background}\n    >\n      <Grid item>\n        <Title variant=\"h3\">Funny Norris</Title>\n      </Grid>\n      <Grid item xs container>\n        {categories.map((category, i) => (\n          <JokeCardContainer key={i}>\n            <JokeCard category={category} positionIndex={i} />\n          </JokeCardContainer>\n        ))}\n      </Grid>\n      <JokeActions />\n    </Wrapper>\n  )\n}\n\nexport default JokesCategories\n","import { createMuiTheme } from '@material-ui/core/styles'\n\nexport default createMuiTheme({})\n","import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport ThemeProvider from '@material-ui/styles/ThemeProvider'\nimport StylesProvider from '@material-ui/styles/StylesProvider'\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components'\n\nimport { JokeProvider } from './context/joke-context'\nimport JokesCategories from './components/JokesCategories'\n\nimport theme from './constants/theme'\n\nfunction App() {\n  return (\n    <StylesProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <StyledThemeProvider theme={theme}>\n          <CssBaseline />\n\n          <JokeProvider>\n            <JokesCategories />\n          </JokeProvider>\n        </StyledThemeProvider>\n      </ThemeProvider>\n    </StylesProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}